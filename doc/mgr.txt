================================================================================
OVERVIEW

Theme manager adds the following capabilities:

- Automatically load the colorscheme used the last time that vim was used.

- Randomly load a colorscheme within a user-defined group of colorschemes.

- Activate the airline or lightline plugins if the colorscheme has defined
  theme for that program.  It is possible to specify which plugin is preferred
  if both themes exist.

- Specify airline or lightline theme based on the colorscheme.  This is to
  account for the fact that not all airline or lightline themes are
  consistently named.

- Provide mappings to quickly toggle between light and dark backgrounds.

- Provide mappings to quickly switch between colorscheme variants if they
  exist.

This plugin needs to be configured for the available colorschemes in the vim
installation with the following function calls:

*mgr#init()*

This function initializes the variables the plugin uses.

*mgr#add(name, opts)*

This function adds information about a colorscheme.  This function requires
the following parameters:

'name': the name of the colorscheme.  This needs to match the colorscheme
name used to set the colorscheme with the :colorscheme command.

'opt': A dictionary of options for the colorscheme.  This dictionary may any
of the following keys:

  variants: A list of variants of the colorscheme.

  pre: A list of commands to run before setting the colorscheme.  This
    is intended to set configuration variables for the colorscheme.

  next_variant: A funcref to a dictionary function that will switch to a the next
    colorscheme variant in the variants list.

  default_variant: A funcref to a dictionary function that will set the defaul
    colorscheme style.

  status: A funcref to a dictionary function that will return the
    colorscheme name and variant for use in the status line.  Defaults to
    mgr#cscheme.

  lightline: A funcref to a dictionary function that will return the name
    of the lightline theme for the colorscheme.

  airline: A funcref to a dictionary function that will return the name of
    the airline theme for the colorscheme.

  toggle: A funcref to a dictionary function that will toggle between dark
    and light versions of a colorscheme.

  map: A funcref to a dictionary function that is referenced in the
    |mgr#nxt_cscheme_var_mp()| function.

  style_variable: The name of the variable used to set the colorschem
    style.  This is used by the |mgr#nxt_styl_var()| and
    |mgr#tggl_cscheme_styl()| functions.

  default_style: The users preferred style for the colorscheme.  Used by
    |mgr#def_styl_var()| and
    |mgr#def_styl_bg_var()| functions.

A number of built in dictionary functions are available for use in the above
keys.  For a list of all available functions see |mgr-dictionary-functions|.

Colorschemes can also be grouped so that a random colorscheme can be selected
from a colorscheme that belongs to the same group as the current colorscheme.
Groups are created with the following functions:

*mgr#init_groups()*

This function initializes the dictionary that holds all colorscheme groups.

*mgr#init_group()*

This function initializes a colorscheme group.

*mgr#add_cscheme(name)*

This function adds a colorscheme to a group.

*mgr#add_group(name)*

This function add the current group to colorscheme groups.

At startup the plugin will trigger the User InitializeMgr autocmd which can be
used start configuration.  The plugin waits until the User MgrInitialized
autocmd before it sets the new colorscheme.

For example, to add configuration for the ayu colorscheme and create a group
containing the seabird colorschemes the following code would be used:

  autocmd User InitializeMgr call mgr#init()
                         \ | call mgr#add('ayu', {
                         \                'variants'       : ['light', 'dark', 'mirage'],
                         \                'style_variable' : 'g:ayucolor',
                         \                'default_style'  : 'light',
                         \                'next_variant'   : function('mgr#nxt_styl_var'),
                         \                'default_variant': function('mgr#def_styl_var'),
                         \                'status'         : function('mgr#cscheme_styl'),
                         \                'lightline'      : function('mgr#cscheme'),
                         \                'airline'        : function('mgr#cscheme'),
                         \                'toggle'         : function('mgr#tggl_cscheme_styl')
                         \                })
                         \ | call mgr#init_group()
                         \ | call mgr#add_cscheme('greygull')
                         \ | call mgr#add_cscheme('petrel')
                         \ | call mgr#add_cscheme('seagull')
                         \ | call mgr#add_cscheme('stormpetrel')
                         \ | call mgr#add_group('seabird_themes')
                         \ | doautocmd User MgrInitialized

================================================================================
KEYMAPS

The following <Plug> mappings with the default keymaps set by the plugin are
available.

<Plug>PreviousVariant    <leader>-   Cycle backwards through theme variants. Can
                                     take a count argument.
<Plug>NextVariant        <leader>+   Cycle forwards through theme variants.  Can
                                     take a count argument.
<Plug>ToggleBackground   <leader>b   Toggle background.
<Plug>RandomScheme       <leader>r   Load random colorscheme.
<Plug>RandomGroupScheme  <leader>p   Load random colorscheme from colorscheme group.


================================================================================
OPTIONS                                                    *mgr-options*

                                                               *g:prefer_airline*

If a colorscheme has an airline and a lightline theme, this variable selects
which plugin to activate.  Defaults to 1.  To activate airline:

  let:g_prefer_airline = 1

To activate lightline:

  let g:prefer_airline = 0

                                                        *g:default_airline_theme*

The name of the airline theme to use if the colorscheme doesn't have an airline
theme.  Default:

  let g:default_airline_theme = 'distinguished'

                                                *g:default_lightline_colorscheme*

The name of the lightline theme to use if the colorscheme doesn't have a
lightline colorscheme.  Default:

  let g:default_lightline_colorscheme = 'powerline'

                                                             *g:colorscheme_file*

The path to the file used to store the last colorscheme and background.

                                                          *g:mgr_slash*

The character to use as a separator in |mgr#ColorschemeStyle()|,
|theme_manger#ColorschemeBackgroundStyle()|, and
|mgr#cscheme_bg_sl()|.  Defaults to '/'.

  let g:mgr_slash = '/'

                                                      *g:mgr_randomize*
Load a random colorscheme from g:colorscheme_map instead of loading the last
colorscheme.

                                                *g:mgr_randomize_group*
Load a random colorscheme from the group the last colorscheme belonged to.

================================================================================
BUILT-IN DICTIONARY FUNCTIONS

*mgr#nxt_cscheme_var()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function changes the colorscheme to the next
colorscheme in the variant list.

*mgr#nxt_cscheme_var_mp()*

The list of variants for the colorscheme is created by using the 'variants' key
in the dictionary as processed through the Map function.  This function changed
the colorscheme to the next colorscheme in the variant list.

*mgr#nxt_styl_var()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function sets the style variable referenced in
the 'style_variable' key to the next variant in the list.

*mgr#nxt_styl_bg_var()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function appends the current background to the
'style_variable' and sets the style variant variable to the next variant in
the list.

*mgr#def_styl_var()*

Sets the style variant variable in 'style_variable' to the value in the
'DefaultStyle' key.

*mgr#def_styl_bg_var()*

Sets the style variant variable in 'style_variable' appended to the current
background to the value in the 'DefaultStyle' key.

*mgr#tggl_bg()*

Toggles the background.

*mgr#tggl_cscheme()*

Changes the background by loading the light or dark version of the colorscheme.

*mgr#tggl_cscheme_styl()*

Changes the background by changing the style variable.

*mgr#cscheme()*

Returns the name of the colorscheme.

*mgr#cscheme_styl()*

Returns the name of the colorscheme appended with the value of the style
variable.  The separator between the colorscheme and the style is
|g:mgr_slash|.

*mgr#cscheme_bg_styl()*

Returns the name of the colorscheme appeneded with the value of the style
variable.  The style variable name is appended with the current background.
The separator between the colorscheme and the style is |g:mgr_slash|.

*mgr#cscheme_bg_sl()*

Returns the name of the colorscheme apprended with the current background.
The separator between the colorscheme and the background is
|g:mgr_slash|.

*theme_namager#cscheme_dsh_to_uscr()*

Returns the colorscheme with all '-' characters changed to '_'.

*mgr#cscheme_rm_dsh()*

Returns the colorscheme with all '-' characters removed.

*mgr#cscheme_lwr()*

Returns the colorscheme name in lower case.

*mgr#cscheme_bg_uscr()*

Returns the name of the colorscheme apprended with the current background.
The separator between the colorscheme and the background is
|g:mgr_underscore|.
