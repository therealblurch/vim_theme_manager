================================================================================
OVERVIEW

Theme manager adds the following capabilities:

- Automatically load the colorscheme used the last time that vim was used.

- Randomly load a colorscheme within a user-defined group of colorschemes.

- Activate the airline or lightline plugins if the colorscheme has defined
  theme for that program.  It is possible to specify which plugin is preferred
  if both themes exist.

- Specify airline or lightline theme based on the colorscheme.  This is to
  account for the fact that not all airline or lightline themes are
  consistently named.

- Provide mappings to quickly toggle between light and dark backgrounds.

- Provide mappings to quickly switch between colorscheme variants if they
  exist.

This plugin needs to be configured for the available colorschemes in the vim
installation by defining |g:colorscheme_map| in .vimrc.

================================================================================
KEYMAPS

{count}<leader>-   Cycle backwards through theme variants.
{count}<leader>+   Cycle forwards through theme variants.
<leader>b          Toggle background.

================================================================================
OPTIONS                                                    *theme_manager-options*

                                                              *g:colorscheme_map*

A list of dictionaries that contain information for each colorscheme.  Each
dictionary must have a 'name' and 'StatusColorscheme' key.  All other keys are
optional.  Possible keys are:

  name: the name of the colorscheme.  This must be the name used to set the
    colorscheme.

  comparison: If this is set to 'fuzzy' an exact match of the colorscheme name
    is not required.  This can be used to set options for a group of
    colorschemes with a similar name, such as the base16 colorschemes.

  variants: A list of variants of the colorscheme.

  pre_commands: A list of commands to run before setting the colorscheme.  This
    is intended to set configuration variables for the colorscheme.

  NextVariant: A funcref to a dictionary function that will switch to a the next
    colorscheme variant in the variants list.

  DefaultVariant: A funcref to a dictionary function that will set the defaul
    colorscheme style.

  StatusColorscheme: A funcref to a dictionary function that will return the
    colorscheme name and variant for use in the status line.

  LightlineTheme: A funcref to a dictionary function that will return the name
    of the lightline theme for the colorscheme.

  AirlineTheme: A funcref to a dictionary function that will return the name of
    the airline theme for the colorscheme.

  ToggleScheme: A funcref to a dictionary function that will toggle between dark
    and light versions of a colorscheme.

  Map: A funcref to a dictionary function that is referenced in the
    |theme_manager#NextColorschemeVariantMap()| function.

  dark_tag/light_tag: Strings to be used in |theme_manager#ToggleColorscheme()|
    function.

  style_variable_name: The name of the variable used to set the colorschem
    style.  This is used by the |theme_manager#NextStyleVariant()| and
    |theme_manager#ToggleColorschemeStyle()| functions.

  default_style: The users preferred style for the colorscheme.  Used by
    |theme_manager#DefaultStyleVariant()| and
    |theme_manager#DefaultStyleBackgroundVariant()| functions.

  tr_from/tr_to: Strings used in |theme_manager#ColorschemeTR()| and
    |theme_manager#ColorschemeTR()| functions.

  pat/sub: Strings used in |theme_manager#ColorschemeSub()| and
    |theme_manager#ColorschemeSub()| functions.

  suffix: String used in |theme_manager#ColorschemeSuffix()| and
    |theme_manager#ColorschemeSuffix()| functions.

  pat: String used in |theme_manager#ColorschemeSubBackground()| and
    |theme_manager#ColorschemeSubBackground()| functions.

For example, the dictionary for the ayu colorscheme could look like this:

  let g:colorscheme_map = [
                          \ {
                          \   'name'                : 'ayu',
                          \   'variants'            : ['light', 'dark', 'mirage'],
                          \   'style_variable_name' : 'g:ayucolor',
                          \   'default_style'       : 'light',
                          \   'NextVariant'         : function('theme_manager#NextStyleVariant'),
                          \   'DefaultVariant'      : function('theme_manager#DefaultStyleVariant'),
                          \   'StatusColorscheme'   : function('theme_manager#ColorschemeStyle'),
                          \   'LightlineTheme'      : function('theme_manager#Colorscheme'),
                          \   'AirlineTheme'        : function('theme_manager#Colorscheme'),
                          \   'ToggleScheme'        : function('theme_manager#ToggleColorschemeStyle'),
                          \ },
                          \ ]

A number of built in dictionary functions are available for use in the above
keys.  For a list of all available functions see |theme_manager-dictionary-functions|.

                                                               *g:prefer_airline*

If a colorscheme has an airline and a lightline theme, this variable selects
which plugin to activate.  Defaults to 1.  To activate airline:

  let:g_prefer_airline = 1

To activate lightline:

  let g:prefer_airline = 0

                                                        *g:default_airline_theme*

The name of the airline theme to use if the colorscheme doesn't have an airline
theme.  Default:

  let g:default_airline_theme = 'distinguished'

                                                *g:default_lightline_colorscheme*

The name of the lightline theme to use if the colorscheme doesn't have a
lightline colorscheme.  Default:

  let g:default_lightline_colorscheme = 'powerline'

                                                             *g:colorscheme_file*

The path to the file used to store the last colorscheme and background.

                                                          *g:theme_manager_slash*

The character to use as a separator in |theme_manager#ColorschemeStyle()|,
|theme_manger#ColorschemeBackgroundStyle()|, and
|theme_manager#ColorschemeBackgroundSlash()|.  Defaults to '/'.

  let g:theme_manager_slash = '/'

                                                     *g:theme_manager_underscore*

The character to use as a separator in
|theme_manager#ColorschemeBackgroundUnderscore()|.  Defaults to '_'.

  let g:theme_manager_underscore = '_'

                                                           *g:colorscheme_groups*

This variable is a dictionary of lists of related colorschemes.  On startup, if
the last colorscheme used is a member of one of the lists, then theme_manager
will randomly choose a colorscheme from the list.  Each dictionary key is a
unique name for that list:

  let g:colorscheme_groups = {
                             \  'seabird_themes' : [
                             \                       'greygull',
                             \                       'petrel',
                             \                       'seagull',
                             \                       'stormpetrel'
                             \                     ],
                             \ }

================================================================================
BUILT-IN DICTIONARY FUNCTIONS

*theme_manager#NextColorschemeVariant()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function changes the colorscheme to the next
colorscheme in the variant list.

*theme_manager#NextColorschemeVariantMap()*

The list of variants for the colorscheme is created by using the 'variants' key
in the dictionary as processed through the Map function.  This function changed
the colorscheme to the next colorscheme in the variant list.

*theme_manager#NextStyleVariant()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function sets the style variable referenced in
the 'style_variable_name' key to the next variant in the list.

*theme_manager#NextStyleBackgroundVariant()*

The list of variants for the colorscheme is created using the 'variants' key in
the colorscheme dictionary.  This function appends the current background to the
'style_variable_name' and sets the style variant variable to the next variant in
the list.

*theme_manager#DefaultStyleVariant()*

Sets the style variant variable in 'style_variable_name' to the value in the
'default_style' key.

*theme_manager#DefaultStyleBackgroundVariant()*

Sets the style variant variable in 'style_variable_name' appended to the current
background to the value in the 'default_style' key.

*theme_manager#NextBackgroundVariant()*

Switches to the next colorscheme variant by toggling the background.

*theme_manager#ToggleBackground()*

Toggles the background.

*theme_manager#ToggleColorscheme()*

Changes the background by loading the light or dark version of the colorscheme.

*theme_manager#ToggleColorschemeStyle()*

Changes the background by changing the style variable.

*theme_manager#Colorscheme()*

Returns the name of the colorscheme.

*theme_manager#ColorschemeStyle()*

Returns the name of the colorscheme appended with the value of the style
variable.  The separator between the colorscheme and the style is
|g:theme_manager_slash|.

*theme_manager#ColorsSchemeBackgroundStyle()*

Returns the name of the colorscheme appeneded with the value of the style
variable.  The style variable name is appended with the current background.
The separator between the colorscheme and the style is |g:theme_manager_slash|.

*theme_manager#ColorschemeBackgroundSlash()*

Returns the name of the colorscheme apprended with the current background.
The separator between the colorscheme and the background is
|g:theme_manager_slash|.

*theme_namager#ColorschemeTR()*

Returns the colorscheme with characters found in the 'tr_from' key replaced
with characters in the 'tr_to' key.

*theme_manager#ColorscheemSub()*

Returns the colorscheme with the string in the 'pat' key replaced with the
string in the 'sub' key.

*theme_manager#ColorschemeSubBackground()*

Returns the colorscheme with the string in the 'pat' key replaced with the
current background.

*theme_manager#ColorschemeLower()*

Returns the colorscheme name in lower case.

*theme_manager#ColorschemeSuffix()*

Returns the colorscheme appended with the string in the 'suffix' key.

*theme_manager#ColorschemeBackgroundUnderscore()*

Returns the name of the colorscheme apprended with the current background.
The separator between the colorscheme and the background is
|g:theme_manager_underscore|.
